class MaxHeap:
    def __init__(self):
        self.heap = []
        self.heap.append(0)

    def size(self): return len(self.heap)-1
    def isEmpty(self):self.size() == 0
    def Parent(self,i):return self.heap[i//2]
    def Left(self,i):return self.heap[i*2]
    def Right(self,i):return self.heap[i*2+1]
    def display(self,msg="힙 트리: "):
        print(msg,self.heap[1:])

    def insert(self,n):     # 삽입
        self.heap.append(n)     # 제일 끝에 삽입
        i=self.size()
        while i!= 1 and n> self.Parent(i):
            self.heap[i] = self.Parent(i)
            i = i//2
        self.heap[i] = n

    def delete(self):
        parent = 1
        child = 2
        if not self.isEmpty():
            hroot = self.heap[1]
            last = self.heap[self.size()]
            while child <= self.size():
                if child<self.size() and self.Left(parent)<self.Right(parent):
                    child +=1
                if last >=self.heap[child]:
                    break
                self.heap[parent] = self.heap[child]
                parent = child
                child *=2

            self.heap[parent] = last
            self.heap.pop(-1)
            return hroot
            

mh = MaxHeap()
mh.insert(5)
mh.insert(7)
mh.insert(9)
mh.display()
mh.insert(8)
mh.insert(10)
mh.display()
mh.delete()
mh.delete()
mh.display()
